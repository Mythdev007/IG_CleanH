<?php

namespace Modules\Products\Datatables;

use Modules\Platform\Core\Datatable\PlatformDataTable;
use Modules\Platform\Core\Helper\DataTableHelper;
use Modules\Platform\Core\QueryBuilderParser\QueryBuilderParser;
use Modules\Products\Entities\ProductDates;
use Yajra\DataTables\EloquentDataTable;

class ProductDatesDatatable extends PlatformDataTable
{
    const SHOW_URL_ROUTE = 'products.products_dates.show';

    protected $editRoute = 'products.products_dates.edit';

    public function setAdditionalValues($values = [])
    {

        parent::setAdditionalValues($values); // TODO: Change the autogenerated stub
    }

    public static function availableQueryFilters()
    {
        return [
            [
                'id' => 'products_dates.date',
                'label' => trans('products::products_dates.form.date'),
                'type' => 'double',
            ]
        ];
    }

    public static function availableColumns()
    {
        return [
            'date' => [
                'data' => 'date',
                'title' => trans('products::products_dates.form.date'),
                'data_type' => 'text',
                'filter_type' => 'text'
            ]
        ];
    }

    protected function setFilterDefinition()
    {
        $this->filterDefinition = self::availableQueryFilters();
    }

    /**
     * Build DataTable class.
     *
     * @param mixed $query Results from query() method.
     * @return \Yajra\DataTables\DataTableAbstract
     */
    public function dataTable($query)
    {
        $dataTable = new EloquentDataTable($query);

        $this->applyLinks($dataTable, self::SHOW_URL_ROUTE);

        $dataTable->filterColumn('owner', function ($query, $keyword) {
            DataTableHelper::queryOwner($query, $keyword, 'products_dates');
        });

        $dataTable->filterColumn('created_at', function ($query, $keyword) {
            $dates = DataTableHelper::getDatesForFilter($keyword);

            if ($dates != null) {
                $query->whereBetween('products_dates.created_at', array($dates[0], $dates[1]));
            }
        });
        $dataTable->filterColumn('updated_at', function ($query, $keyword) {
            $dates = DataTableHelper::getDatesForFilter($keyword);

            if ($dates != null) {
                $query->whereBetween('products_dates.updated_at', array($dates[0], $dates[1]));
            }
        });
        $dataTable->filterColumn('date', function ($query, $keyword) {
            $dates = DataTableHelper::getDatesForFilter($keyword);

            if ($dates != null) {
                $query->whereBetween('products_dates.date', array($dates[0], $dates[1]));
            }
        });


        return $dataTable;
    }


    /**
     * @param ProductDates $model
     * @return \Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Query\Builder
     * @throws \Modules\Platform\Core\QueryBuilderParser\QBParseException
     */
    public function query(ProductDates $model)
    {

        $query = $model->newQuery()
            ->with('owner')
            ->leftJoin('products', 'products_dates.product_id', '=', 'products.id')
            ->select(
                'products_dates.*',
                'products.name as product_name'
            );

        $productId = $this->request()->get('productId');

        $query->where('products_dates.product_id', $productId);

        if (!empty($this->filterRules)) {
            $queryBuilderParser = new  QueryBuilderParser();
            $queryBuilder = $queryBuilderParser->parse($this->filterRules, $query);

            return $queryBuilder;
        }

        return $query;

    }

    /**
     * Optional method if you want to use html builder.
     *
     * @return \Yajra\DataTables\Html\Builder
     */
    public function html()
    {
        return $this->builder()
            ->columns($this->getColumns())
            ->minifiedAjax(route('products.products_dates.index', ['productId' => $this->additionalValues['productId']]))
            ->setTableAttribute('class', 'table table-hover')
            ->parameters([
                'dom' => 'lBfrtip',
                'responsive' => false,
                'stateSave' => true,
                'filterDefinitions' => $this->getFilterDefinition(),
                'filterRules' => $this->filterRules,
                'headerFilters' => true,
                'buttons' => DataTableHelper::buttons(),
                'regexp' => true,

            ]);
    }

    /**
     * @return array
     */
    protected function getColumns()
    {
        if (!empty($this->advancedView)) {
            return $this->advancedView;
        }

        $columns = self::availableColumns();


        $result = [];

        if ($this->allowSelect) {
            $result = $this->btnCheck_selection;
        }
        if ($this->allowUnlink) {
            $result = $this->btnUnlink;
        }
        if ($this->allowQuickEdit) {
            $result = $result + $this->btnQuick_edit;;
        }

        $result = $result + $columns;

        return $result;
    }
}
